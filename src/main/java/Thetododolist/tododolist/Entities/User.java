package Thetododolist.tododolist.Entities;


import Thetododolist.tododolist.Utilities.PasswordStorage;
import jakarta.persistence.*;
import jakarta.servlet.http.HttpSession;
import org.springframework.security.core.parameters.P;

import java.util.ArrayList;

@Entity
@Table(name = "users")
public class User {

    @Id
    @GeneratedValue
    private long id;

    @Column(nullable = false)
    String userName;

    @Column(nullable = false)
    String email;

    @Column(nullable = false)
    String passWord;

    @Column
    boolean isLoggedIn;

    @Column
    ArrayList<User> collaborators;

    // long id I don't think I need this in the constructor since the id is autogenerated. Need to ask J.
    public User(String userName, String email, String passWord, boolean isLoggedIn, ArrayList<User> collaborators) {
        //this.id = id;
        this.userName = userName;
        this.email = email;
        this.passWord = passWord;
        this.isLoggedIn = isLoggedIn;
        this.collaborators = collaborators;
    }

    public long getId() {
        return id;
    }

    public String getUserName() {
        return userName;
    }

    public String getEmail() {
        return email;
    }

    public String getPassWord() {
        return passWord;
    }

    public boolean isLoggedIn() {
        return isLoggedIn;
    }

    public ArrayList<User> getCollaborators() {
        return collaborators;
    }

    public void setId(long id) {
        this.id = id;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    public void setPassWord(String passWord) {
        this.passWord = passWord;
    }

    public void setLoggedIn(boolean loggedIn) {
        isLoggedIn = loggedIn;
    }

    public void setCollaborators(ArrayList<User> collaborators) {
        this.collaborators = collaborators;
    }

    public static boolean userValidation(User user, User userFromDB, HttpSession session) throws
            PasswordStorage.InvalidHashException, PasswordStorage.CannotPerformOperationException {
        if (user.getUserName() == null || user.getPassWord() == null) {
            return false;
        }
        else if (userFromDB == null) {
            return false;
        }
        else if (!PasswordStorage.verifyPassword(user.getPassWord(),userFromDB.getPassWord())) {
            return false;
        }
        else if (!userFromDB.isLoggedIn()) {
            return false;
        }
        else {
            session.setAttribute("userName", user.getUserName());
            userFromDB.setLoggedIn(true);
            return true;
        }
    }

    public static User isValidUser(User user) throws PasswordStorage.CannotPerformOperationException {
        if (user.getUserName() == null || user.getPassWord() == null || user.getEmail() == null) {
            return null;
        }
        if (!user.getEmail().contains("@")) {
            return null;
        }
        else {
            User userForDB = new User(user.getUserName(), user.getEmail(), PasswordStorage.createHash(user.getPassWord()),
                    true, user.getCollaborators());

            return userForDB;
        }
    }
}
